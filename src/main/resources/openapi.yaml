openapi: 3.0.3
info:
  title: Study platform
  description: Application for helping memorising stuff
  termsOfService: http://swagger.io/terms/
  contact:
    email: markonovakovic994@gmail.com
  license:
    name: Apache 2.0
    url:  http://springdoc.org
  version: 1.0.0+
servers:
  - url: https://localhost
tags:
  - name: Deck
    description: Collection of cards
  - name: FlashCard
    description: Card for memorising, one side is question, on other is its answer
paths:
  /decks/:
    get:
      tags:
        - deck
      summary: getting all decks
      description: returns all decks, or filtered decks depending on query parameteres
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: description
          required: false
          schema:
            type: string
        - in: query
          name: creationDate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: orderBy
          required: false
          schema:
            type: string
        - in: query
          name: orderDirection
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckResponseDTO'
        '400':
          description: Invalid parameter/s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      tags:
        - deck
      summary: creating a deck
      description: creates a deck based on supplied DeckRequestDTO object

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckRequestDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckResponseDTO'
        '400':
          description: Somenthing went wrong, try again later
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /decks/{deckID}:

    get:
      tags:
        - deck
      summary: getting one deck
      description: returns deck depending on recieved deckID
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckResponseDTO'
        '400':
          description: Invalid deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    delete:
      tags:
        - deck
      summary: deleting one deck
      description: deletes deck depending on recieved deckID
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    put:
      tags:
        - deck
      summary: updating one deck
      description: updates deck depending on recieved deckID
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /decks/{deckID}/cards:
    get:
      tags:
        - deck
      summary: getting all cards from deck
      description: returns all cards from deck, cards can be filtered and ordered depending on query parameteres
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: words
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: ordering
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            type: string
        - in: query
          name: orderDirection
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlashCardResponseDTO'
        '400':
          description: Invalid parameter/s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    post:
      tags:
        - deck
      summary: creating a card in deck
      description: creates a card in deck based on supplied FlashCardRequestDTO object
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashCardRequestDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashCardResponseDTO'
        '400':
          description: Somenthing went wrong, try again later
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /decks/{deckID}/cards/{cardID}:
    delete:
      tags:
        - deck
      summary: deleting card from deck
      description: deletes a card from deck depending on recieved parameters
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: cardID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    put:
      tags:
        - deck
      summary: updates card from deck
      description: updates a card from deck depending on recieved parameters
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: cardID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found with that deckID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /decks/{deckID}/startLearning:
    get:
      tags:
        - deck
      summary: start learning with deck
      description: starting learning with selected deck
      parameters:
        - in: path
          name: deckID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

        '400':
          description: Invalid parameter/s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: No deck found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'


components:
  schemas:
    DeckResponseDTO:
      type: object
      description: object for returning decks
      required:
        - id
        - creationdate
      properties:
        id:
          type: string
          format: uuid
        creationdate:
          type: string
          format: date-time
    DeckRequestDTO:
      type: object
      description: object for creating decks
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    FlashCardRequestDTO:
      type: object
      description: object for creating cards
      required:
        - question
        - answer
      properties:
        question:
          type: string
        answer:
          type: string
    FlashCardResponseDTO:
      type: object
      description: object for returning cards
      required:
        - question
        - answer
        - importance
        - deck
      properties:
        question:
          type: string
        answer:
          type: string
        importance:
          type: string
          enum: [REPEAT, HARD, GOOD, EASY]
        deck:
          $ref: '#/components/schemas/DeckResponseDTO'
    ErrorDTO:
      type: object
      description: object for returning errors
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: string